#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : require
#extension GL_EXT_debug_printf : enable

#include "common_generated.h"

layout(binding = 0, set = 0) buffer data0 { uint out_color[]; };
layout(binding = 1, set = 0) uniform accelerationStructureEXT m_pAccelStruct;
layout(binding = 2, set = 0) buffer dataUBO { RayTracer_UBO_Data ubo; };
layout(binding = 3, set = 0) buffer Vertices { Vertex vertices[]; };
layout(binding = 4, set = 0) buffer Indices { uint indices[]; };
layout(binding = 5, set = 0) buffer MatIds { uint mat_ids[]; };
layout(binding = 6, set = 0) buffer Materials { MaterialData_pbrMR materials[]; };
layout(binding = 7, set = 0) buffer InstanceMats { mat4 instance_mats[]; };
layout(binding = 8, set = 0) buffer MeshInfos { MeshInfo mesh_infos[]; };
layout(binding = 9, set = 0) uniform texture2D NoiseTexture;
layout(binding = 10, set = 0) uniform sampler NoiseSamp;


uint ColorToInt(vec4 color) 
{
  uvec4 bytes = uvec4(color * 255.0f);
  uint result = (bytes.a << 24) | (bytes.b << 16) | (bytes.g << 8) | (bytes.r);
  return result;
  //return int(color.x * 255 * 0x01000000) + int(color.y * 0x00FF0000) + int(color.z * 0x0000FF00) + int(color.w * 0x000000FF);
}

vec4 ColorToVec4(uint color)
{
  float r = (color & 0xff) / 255.0f;
  float g = ((color & 0xff00) >> 8) / 255.0f;
  float b = ((color & 0xff0000) >> 16) / 255.0f;
  float a = ((color & 0xff000000) >> 24) / 255.0f;
  vec4 result = vec4(r, g, b, a);
  return result;
}

vec3 DecodeNormal(uint a_data)
{
  const uint a_enc_x = (a_data  & 0x0000FFFFu);
  const uint a_enc_y = ((a_data & 0xFFFF0000u) >> 16);
  const float sign   = (a_enc_x & 0x0001u) != 0 ? -1.0f : 1.0f;

  const int usX = int(a_enc_x & 0x0000FFFEu);
  const int usY = int(a_enc_y & 0x0000FFFFu);

  const int sX  = (usX <= 32767) ? usX : usX - 65536;
  const int sY  = (usY <= 32767) ? usY : usY - 65536;

  const float x = sX*(1.0f / 32767.0f);
  const float y = sY*(1.0f / 32767.0f);
  const float z = sign*sqrt(max(1.0f - x*x - y*y, 0.0f));

  return vec3(x, y, z);
}


// RayScene intersection with 'm_pAccelStruct'
//
CRT_Hit m_pAccelStruct_RayQuery_NearestHit(const vec4 rayPos, const vec4 rayDir)
{
  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, m_pAccelStruct, gl_RayFlagsOpaqueEXT, 0xff, rayPos.xyz, rayPos.w, rayDir.xyz, rayDir.w);
  
  while(rayQueryProceedEXT(rayQuery)) { } // actually may omit 'while' when 'gl_RayFlagsOpaqueEXT' is used
 
  CRT_Hit res;
  res.primId = -1;
  res.instId = -1;
  res.geomId = -1;
  res.t      = rayDir.w;

  if(rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
  {    
	  res.primId    = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);
	  res.geomId    = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true);
    res.instId    = rayQueryGetIntersectionInstanceIdEXT    (rayQuery, true);
	  res.t         = rayQueryGetIntersectionTEXT(rayQuery, true);
    vec2 bars     = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
    
    res.coords[0] = bars.y;
    res.coords[1] = bars.x;
    res.coords[2] = 1.0f - bars.y - bars.x;
  }

  return res;
}

bool m_pAccelStruct_RayQuery_AnyHit(const vec4 rayPos, const vec4 rayDir)
{
  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, m_pAccelStruct, gl_RayFlagsTerminateOnFirstHitEXT, 0xff, rayPos.xyz, rayPos.w, rayDir.xyz, rayDir.w);
  rayQueryProceedEXT(rayQuery);
  return (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint iNumElementsX; 
  uint iNumElementsY; 
  uint iNumElementsZ; 
  uint tFlagsMask;    
} kgenArgs;


vec3 GetNormal(CRT_Hit hit) {
  uint indexOffset = mesh_infos[hit.geomId].indexOffset;
  uint vertexOffset = mesh_infos[hit.geomId].vertexOffset;

  uint i0 = indices[indexOffset + 3 * hit.primId + 0];
  uint i1 = indices[indexOffset + 3 * hit.primId + 1];
  uint i2 = indices[indexOffset + 3 * hit.primId + 2];

  vec4 v0 = vertices[vertexOffset + i0].vertex;
  vec4 v1 = vertices[vertexOffset + i1].vertex;
  vec4 v2 = vertices[vertexOffset + i2].vertex;

  vec4 n0 = vec4(DecodeNormal(floatBitsToInt(v0.w)), 0);
  vec4 n1 = vec4(DecodeNormal(floatBitsToInt(v1.w)), 0);
  vec4 n2 = vec4(DecodeNormal(floatBitsToInt(v2.w)), 0);

  vec3 nLocal = hit.coords[0] * n0.xyz + hit.coords[1] * n1.xyz + hit.coords[2] * n2.xyz;
  vec3 n = normalize(mat3(transpose(inverse(instance_mats[hit.instId]))) * nLocal.xyz);
  return n;
}

vec4 GetPos(CRT_Hit hit)
{
  uint indexOffset = mesh_infos[hit.geomId].indexOffset;
  uint vertexOffset = mesh_infos[hit.geomId].vertexOffset;

  uint i0 = indices[indexOffset + 3 * hit.primId + 0];
  uint i1 = indices[indexOffset + 3 * hit.primId + 1];
  uint i2 = indices[indexOffset + 3 * hit.primId + 2];

  vec4 p0 = vertices[vertexOffset + i0].vertex;
  vec4 p1 = vertices[vertexOffset + i1].vertex;
  vec4 p2 = vertices[vertexOffset + i2].vertex;

  vec3 p = hit.coords[0] * p0.xyz + hit.coords[1] * p1.xyz + hit.coords[2] * p2.xyz;
  return instance_mats[hit.instId] * vec4(p, 1.0f);
}

vec2 random2(vec2 p) {
    float r1 = texture(sampler2D(NoiseTexture, NoiseSamp), p/64.).x;
    float r2 = texture(sampler2D(NoiseTexture, NoiseSamp), (p + vec2(32))/64.).x;
    return vec2(r1, r2);
}

///////////////////////////////////////////////////////////////// subkernels here
void kernel_RayTrace_out_color(uint tidX, uint tidY, in vec4 rayPosAndNear, in vec4 rayDirAndFar, uint out_colorOffset) 
{
  vec4 rayPos = rayPosAndNear;
  vec4 rayDir = rayDirAndFar;
  uvec2 coordInit = uvec2(gl_GlobalInvocationID[0], gl_GlobalInvocationID[1]);
  
  vec3 color = vec3(0.0f, 0.0f, 0.0f);
  
  uint hash = ((uint(coordInit.x) << 12) | uint(coordInit.y)) ^ floatBitsToUint(ubo.time);

  for (int j = 0; j < light_cnt; ++j)
  {
    CRT_Hit hit = m_pAccelStruct_RayQuery_NearestHit(rayPos, rayDir);
    if (hit.primId == -1) {
      //color = vec3(0.3f, 0.3f, 0.3f);
      break;
    }
    
    vec3 hit_point = vec3(rayPos) + vec3(rayDir)*hit.t;
    vec3 n = GetNormal(hit);

    if(soft_shadow)
    {
      float total = 0.0f;
      float distanceToLight = length(m_lights[j].pos.xyz - hit_point);
      for (int u = 0; u < samples_cnt; u++)
      {   
        hash += uint(u);
        vec3 random = random_pcg3d(uvec3(coordInit, hash));
        //int second = (int(ubo.time*60)*samples_cnt) + u;
        //vec2 random = Nth_weyl(vec2(0.0f), second)/64;
        //debugPrintfEXT("random = %1.2v3f\n", random);
        //vec2 random = random_pcg2d(coordInit);
        vec4 rngState = texture(sampler2D(NoiseTexture, NoiseSamp),random.xy);
        float criteria = (random.z*2) - 1;
        float rngOffset;
        if(criteria > 0)
          rngOffset = rngState.x;
        else
          if(criteria < 0)
            rngOffset = rngState.g;
          else
            rngOffset = rngState.b;
        vec3 lightPos = PointOnLight(m_lights[j],rngOffset);
        //vec3 lightDir = normalize(lightPos - hit_point);
        vec3 shadow_orig  = (dot(vec3(rayDir), n) < 0) ? hit_point + n * 1e-4 : hit_point - n * 1e-4;
        vec3 shadowDir = normalize(lightPos - shadow_orig);

        //CRT_Hit hitShadow = m_pAccelStruct_RayQuery_NearestHit(vec4(hit_point, 0.1f), vec4(shadowDir, hit.t));
        //if (hitShadow.primId == -1)
        bool isIntersect = m_pAccelStruct_RayQuery_AnyHit(vec4(hit_point, 0.1f), vec4(shadowDir, distanceToLight));
        if (!isIntersect)
        {
          total += 1.0f;
          float shade = max(dot(n, normalize(shadowDir)), 0.0f);
          //float q = sqrt(1.0f - (m_lights[j].rad / distanceToLight) * (m_lights[j].rad / distanceToLight));
          // float pdf_xp = 1.0f / (2*M_PI * (1.0f - q));
          // color += shade * (1.0f / pdf_xp) * m_lights[j].intensity;
          //color += shade*m_lights[j].intensity/(4 * M_PI * m_lights[j].rad*m_lights[j].rad);
          color += shade;
        }
      }
      color*=(total / (samples_cnt));
    }
    else
    {
      vec3 lightPos = m_lights[j].pos.xyz;
      vec3 shadow_orig  = (dot(vec3(rayDir), n) < 0) ? hit_point + n * 1e-4 : hit_point - n * 1e-4;
      vec3 shadowDir = normalize(lightPos - shadow_orig);
      float rayMax = length(lightPos - shadow_orig);
      
      //CRT_Hit hitShadow = m_pAccelStruct_RayQuery_NearestHit(vec4(hit_point, 0.1f), vec4(shadowDir, MAXFLOAT));
      bool isIntersect = m_pAccelStruct_RayQuery_AnyHit(vec4(hit_point, 0.1f), vec4(shadowDir, rayMax));

      if (!isIntersect) // condition for to be in light
      {
        color+=vec3(0.0,1.0,0.0);
        //float shade = max(dot(normalize(shadowDir), n), 0.0f);
        //color += shade;
        //color += shade*m_lights[j].intensity/(4 * M_PI * m_lights[j].rad*m_lights[j].rad);
      }

      
        
    }
  }

  if(debug_light_pos)
  {
    vec3 k = vec3(rayPos) - vec3(m_lights[0].pos);
    float b = dot(k,vec3(rayDir));
    float c =dot(k,k) - m_lights[0].rad * m_lights[0].rad;
    float d = b*b -c;
    if(d >=0)
    {
      float sqrtd = sqrt(d);
      // t, a == 1
      float t1 = -b + sqrtd;
      float t2 = -b - sqrtd; 
      float min_t  = min(t1,t2);
      float max_t = max(t1,t2);
      float t = (min_t >= 0) ? min_t : max_t;
      if (t > 0)
        color=vec3(1.0f,1.0f,0.0f) ;
    }
  }
  out_color[tidY * ubo.m_width + tidX + out_colorOffset] = ColorToInt(vec4(clamp(color, 0.0, 1.0), 1.0));
}

void kernel_InitEyeRay(uint tidX, uint tidY, inout vec4 rayPosAndNear, inout vec4 rayDirAndFar) 
{
  
  uint hash = ((uint(gl_GlobalInvocationID[0]) << 12) | uint(gl_GlobalInvocationID[1])) ^ floatBitsToUint(ubo.time);
  hash += uint(gl_LocalInvocationIndex);
  rayPosAndNear = ubo.m_camPos; // to_float4(m_camPos, 1.0f);
  
  const vec3 rayDir = EyeRayDir(float(tidX), float(tidY), float(ubo.m_width), float(ubo.m_height), ubo.m_invProjView);
  rayDirAndFar  = vec4(rayDir, MAXFLOAT);

}

///////////////////////////////////////////////////////////////// subkernels here

void main()
{
  ///////////////////////////////////////////////////////////////// prolog
  const uint tidX = uint(gl_GlobalInvocationID[0]); 
  const uint tidY = uint(gl_GlobalInvocationID[1]); 
  const vec4 m_camPos = ubo.m_camPos;
  const uint m_height = ubo.m_height;
  const uint m_width = ubo.m_width;
  ///////////////////////////////////////////////////////////////// prolog

  vec4 rayPosAndNear,  rayDirAndFar;
  kernel_InitEyeRay(tidX, tidY, rayPosAndNear, rayDirAndFar);

  kernel_RayTrace_out_color(tidX, tidY, rayPosAndNear, rayDirAndFar, 0);

}

